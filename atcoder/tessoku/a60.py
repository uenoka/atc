
'''
# 問題

株式会社 KYOPRO-MASTER は上場から $N$ 日が経過しており、$i$ 日目の株価は $A\_i$ 円でした。太郎君は、それぞれの日について「株価が何日ぶりの高値を更新したか」を求めようと思いました。ここで $d$ 日目に対する **起算日** を次のように定義します。

* $i < d$ かつ $A\_i > A\_d$ を満たす最大の $i$
* ただし、そのような $i$ が存在しない場合、起算日はない

$d = 1, 2, \ldots, N$ について、起算日を計算してください。

# 考察

起算日の定義が、i < d かつ Ai > Ad を満たす最大の i

まずはサンプルで起算日の定義を確認しよう。
input 
6
6 2 5 3 1 4

output
-1 1 1 3 4 3

最初は -1 は当たり前。(それより前の日がないので。)
2日目の株価は2で1日目は6だから、1日めのほうが高いので1。
なんとなく見えてきた。
例えば
1 4 3 2 1 2 3 で 6日目の起算日は 3 (4日目以前で2よりも株価が大きい日は1,2,3日目で、そのうち最大のものは3日目なので。)
なんとなく区間のMaxを取るとか、そういうことをすれば良さそうにも見えるけど、それだとあるなししかわからんな。
あー、でも、Max を管理しておいて、その上で、どの要素が一番 i が最大になるかつ Ad よりも大きいかを見て行けば O(logN)でクエリできるから、
O(NlogN)で解けそう。

はぁー、なるほど、Stackでこれ出来るのか。頭いいなぁ。
'''
N = int(input())
A = list(map(int,input().split()))
stack = []
for i,a in enumerate(A):
    while stack and stack[-1][0]<= a:
        stack.pop()
    if stack:
        print(stack[-1][1], end=" ")
    else:
        print(-1, end=" ")
    stack.append((a,i+1))