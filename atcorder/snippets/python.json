{
	// 数値入力系
	"n input":{
		"prefix": "nint",
		"body": [
			"N = int(input())"
		]
	},
	"x input":{
		"prefix": "xint",
		"body": [
			"X = int(input())"
		]
	},
	"n m input":{
		"prefix": "nmint",
		"body": [
			"N, M = map(int,input().split())"
		]
	},
	"a b input":{
		"prefix": "abint",
		"body": [
			"A, B = map(int,input().split())"
		]
	},
	"x y input":{
		"prefix": "xyint",
		"body": [
			"X, Y = map(int,input().split())"
		]
	},
	"input one line list":{
		"prefix": "inlist",
		"body": [
			"A = list(map(int,input().split()))",
		]
	},

// 文字列入力系
	// 文字列１行入力、Nパターン
	"n str input":{
		"prefix": "nstr",
		"body": [
			"N = input()"
		]
	},
	// 文字列１行入力、Aパターン
	"a str input":{
		"prefix": "astr",
		"body": [
			"A = input()"
		]
	},
	// 文字列１行入力、Sパターン
	"s str input":{
		"prefix": "sstr",
		"body": [
			"S = input()"
		]
	},

// 入力複数行系
	// Nの後に複数行の文字列が入力されるとき
	"for n input":{
		"prefix": "forstr",
		"body": [
			"N = int(input())",
			"M = [input() for i in range(N)]"
		]
	},

	// Nの後に複数行の数値が入力されるとき
	"for n input int":{
		"prefix": "forint",
		"body": [
			"N = int(input())",
			"M = [int(input()) for i in range(N)]"
		]
	},
	// Nの後に複数行のスペース区切りの数値が入力されるとき
	"for n input int list":{
		"prefix": "forintls",
		"body": [
			"N = int(input())",
			"M = [map(int,input().split()) for i in range(N)]"
		]
	},

	// glid 系
	"h w input":{
		"prefix": "loadglid",
		"body": [
			"H,W = map(int,input().split())",
			"glid = [input() for i in range(H)]"
		]
	},
	// その他の機能
	// 2^N の状態管理（000~111など）
	// たぶん推奨はN=20~24くらいまで(https://qiita.com/drken/items/872ebc3a2b5caaa4a0d0)
	"2^N state":{
		"prefix": "state",
		"body": [
			"import itertools",
			"status = [(0, 1) for _ in range(N)]",
			"state = list(itertools.product(*status))"
		]
	},
	// 素数判定
	"prime":{
		"prefix": "isprime",
		"body": [
			"def is_prime(n):",
			"    if n == 1:",
			"        return False",
			"    if n == 2:",
			"        return True",
			"    if n%2 == 0:",
			"        return False",
			"    for i in range(2,int(n**0.5)+1):",
			"        if n%i == 0:",
			"            return False",
			"    return True",			
		]
	},
	// Double型にするとよくないから、i^2 バージョン
	"prime2":{
		"prefix": "isprime2",
		"body": [
			"def is_prime2(n):",
			"    if n == 1:",
			"        return False",
			"    if n == 2:",
			"        return True",
			"    if n%2 == 0:",
			"        return False",
			"    i = 1",
			"    while i**2 <= N:",
			"        if N%i == 0:",
			"            return True",
			"        i += 1",
			"    return False",
			"N = int(input())",
			"print(is_prime(N))",
			"print(is_prime2(N))",						
		]
	},

	// 最大公約数
	"gcd":{
		"prefix": "gcd",
		"body": [
			"import math",
			"from functools import reduce",
			"def gcd(*numbers):",
			"    return reduce(math.gcd, numbers)",
			"def gcd_list(numbers):",
			"    return reduce(math.gcd, numbers)",
		]
	},
	// 約数列挙
	"list divisor":{
		"prefix": "divlist",
		"body": [
			"def make_divisors(n):",
			"    divisors = []",
			"    for i in range(1, int(n**0.5)+1):",
			"        if n % i == 0:",
			"            divisors.append(i)",
			"            if i != n // i:",
			"                divisors.append(n//i)",
			"    #divisors.sort()",
			"    return divisors",

		]
	},
	// 素因数分解
	"Prime factorization":{
		"prefix": "prime_fact",
		"body": [
			"'''",
			"input : 数字",
			"return : a^p,b^q,...,c^r を {a:p,b:q,...,c:r} の dict で表したもの",
			"'''",
			"def prime_factorization(N):",
			"    pf = {}",
			"    num = 2",
			"    while num**2 <= N:",
			"        cnt = 0",
			"        while N%num == 0:",
			"            cnt += 1",
			"            N = N//num",
			"        pf[num] = cnt",
			"        num+=1",
			"    return pf",
		]
	},

	// 同じ数字のカウント
	"collection":{
		"prefix": "collection",
		"body": [
			"import collections",
			"L = [int(i) for i in input()]",
			"C = collections.Counter(L)",
			
		]
	},
	// アルファベット（地味にBとかで出る）
	"alphabet":{
		"prefix": "alphabet",
		"body": [
			"alphabet = 'abcdefghijklmnopqrstuvwxyz'",
		]
	},
	
		// YESを出力
		"YES":{
			"prefix": "YES",
			"body": [
				"print('YES')",
			]
		},
		// YESを出力
		"Yes":{
			"prefix": "Yes",
			"body": [
				"print('Yes')",
			]
		},
		// YESを出力
		"NO":{
			"prefix": "NO",
			"body": [
				"print('NO')",
			]
		},
		// YESを出力
		"No":{
			"prefix": "No",
			"body": [
				"print('No')",
			]
		},
}
